name: CI & Deploy (apps/web)

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Detect package manager based on lock files at repo root
      - id: pm
        name: Detect package manager
        run: |
          if [ -f pnpm-lock.yaml ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
          elif [ -f yarn.lock ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
          elif [ -f package-lock.json ] || [ -f npm-shrinkwrap.json ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
          else
            # No lock found â€” generate npm lock as fallback to satisfy actions/setup-node cache
            npm i --package-lock-only
            echo "manager=npm" >> $GITHUB_OUTPUT
          fi
          echo "Detected manager: $(cat $GITHUB_OUTPUT || true)"

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: ${{ steps.pm.outputs.manager == 'pnpm' && 'pnpm' || (steps.pm.outputs.manager == 'yarn' && 'yarn' || 'npm') }}

      - name: Setup pnpm (if needed)
        if: ${{ steps.pm.outputs.manager == 'pnpm' }}
        uses: pnpm/action-setup@v4
        with:
          version: 9

      - name: Install dependencies (root)
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then
            pnpm install --frozen-lockfile
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then
            yarn install --frozen-lockfile
          else
            npm ci
          fi

      - name: Build web (apps/web)
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then
            pnpm --filter ./apps/web build
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then
            (cd apps/web && yarn build)
          else
            (cd apps/web && npm run build)
          fi

      - name: Run tests (all workspaces) - continue on warning
        run: |
          if [ "${{ steps.pm.outputs.manager }}" = "pnpm" ]; then
            pnpm -r test --if-present || true
          elif [ "${{ steps.pm.outputs.manager }}" = "yarn" ]; then
            yarn workspaces foreach -v run test || true
          else
            npm test --workspaces --if-present || true
          fi

      # Skip Expo guard unless Expo truly exists
      - name: Expo dependency guard (optional)
        shell: bash
        run: |
          if [ -f "mobile-app/package.json" ] && grep -q '"expo"' mobile-app/package.json; then
            node scripts/expo-dep-guard.mjs --ci || node scripts/expo-dep-guard.mjs --ci --fallback || true
          else
            echo "Expo not present; skipping guard."
          fi

      # Configure Pages and upload the static artifact from apps/web/out
      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload Pages artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: apps/web/out

      - name: Deploy to GitHub Pages
        if: ${{ github.ref == 'refs/heads/main' && github.event_name == 'push' }}
        uses: actions/deploy-pages@v4
